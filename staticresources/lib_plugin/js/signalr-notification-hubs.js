/*!
 * ASP.NET SignalR JavaScript Library v2.1.1
 * http://signalr.net/
 *
 * Copyright Microsoft Open Technologies, Inc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/SignalR/SignalR/blob/master/LICENSE.md
 *
 */
(function (e, t, n) { "use strict"; function i(t, n) { return function () { n.apply(t, e.makeArray(arguments)) } } function s(t, n) { var r, s, o, u, a; for (r in t) { if (t.hasOwnProperty(r)) { s = t[r]; if (!s.hubName) { continue } if (n) { a = s.on } else { a = s.off } for (o in s.client) { if (s.client.hasOwnProperty(o)) { u = s.client[o]; if (!e.isFunction(u)) { continue } a.call(s, o, i(s, u)) } } } } } if (typeof e.signalR !== "function") { throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.") } var r = e.signalR; e.hubConnection.prototype.createHubProxies = function () { var t = {}; this.starting(function () { s(t, true); this._registerSubscribedHubs() }).disconnected(function () { s(t, false) }); t["agentBridgeHub"] = this.createHubProxy("agentBridgeHub"); t["agentBridgeHub"].client = {}; t["agentBridgeHub"].server = { checkAgentStatus: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["CheckAgentStatus"], e.makeArray(arguments))) }, getAgentKey: function (n, r) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["GetAgentKey"], e.makeArray(arguments))) }, publishCallInProgressNotification: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishCallInProgressNotification"], e.makeArray(arguments))) }, publishCallStatusUpdate: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishCallStatusUpdate"], e.makeArray(arguments))) }, publishConnectionTestNotification: function (n, r) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishConnectionTestNotification"], e.makeArray(arguments))) }, publishNewLeadNotification: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishNewLeadNotification"], e.makeArray(arguments))) }, publishShotgunCallAvailable: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishShotgunCallAvailable"], e.makeArray(arguments))) }, publishSimpleNotification: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishSimpleNotification"], e.makeArray(arguments))) }, publishTransferCallAvailable: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishTransferCallAvailable"], e.makeArray(arguments))) }, publishTransferCallStatusUpdate: function (n) { return t["agentBridgeHub"].invoke.apply(t["agentBridgeHub"], e.merge(["PublishTransferCallStatusUpdate"], e.makeArray(arguments))) } }; return t }; r.hub = e.hubConnection("/signalr", { useDefaultPath: false }); e.extend(r, r.hub.createHubProxies()) })(window.jQuery, window)